############################### NEW ################################
name: Relis unit test

on:
  push:
    branches:
      - main

permissions: write-all
  # actions: write
  # contents: write
  # checks: write
  # deployments: write
  # discussions: write
  # issues: write
  # packages: write
  # pages: write
  # pull-requests: write
  # repository-projects: write
  # security-events: write
  # statuses: write

jobs:
  relis_unit_testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check token scopes
        run: "curl -I -H \"Authorization: token ${{ secrets.RELIS_TOKEN }}\" https://api.github.com/users/christmalak90"
      
      - name: Check if Docker is installed
        run: |
          if docker --version; then
            echo "Docker is installed in your repository."
          else
            echo "Docker is not installed, please install Docker in your Github Repository."
          fi

      - name: Run Unit test
        run: |
          echo $GITHUB_SHA > .github/workflows/successful_commit.txt
          git config user.email $GITHUB_ACTOR
          git config user.name $GITHUB_ACTOR
          git add -f .github/workflows/successful_commit.txt
          git commit -m $GITHUB_SHA
          git push https://${{ secrets.RELIS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git main
        
          
          ## echo example-line
          # echo $GITHUB_EVENT_NAME
          # echo fail
          # git config user.email $GITHUB_ACTOR
          # git config user.name $GITHUB_ACTOR
          # # Retrieve the commit hash from the file
          # last_successful_commit=$(cat successful_commit.txt)
        
          # # Reset the branch to the last successful commit
          # #git clone https://github.com/$GITHUB_ACTOR/relis_demo_test.git
          # #git reset --hard -- b91127550d6c2431f70bdd6d77bee87fb7669cc5

          # git fetch --unshallow
          # #git log --pretty=format:%H
          # git revert -X theirs --no-edit 72de205
          # # git commit -m "Revert"

          # # Force push to update the branch on the remote repository
          # #git push --force
          # git push https://${{ secrets.RELIS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git main

          # # # echo $GITHUB_SHA > successful_commit.txt
          # # # git config user.email $GITHUB_ACTOR
          # # # git config user.name $GITHUB_ACTOR
          # # # git add -f successful_commit.txt
          # # # git commit -m $GITHUB_SHA
          # # # git push origin main

          # # echo ############pushTag
          # # git push origin last_successful_commit

          # # echo ############fetchTag
          # # git fetch --tags

          # # echo ############showTag
          # # git show last_successful_commit
          # # 3200e6ab353824bbc3919236ee432b78598afbb3

###
# - name: Build Docker Image
#   run: docker-compose build
#   working-directory: relis_deployment

# - name: Run Docker Containers
#   run: docker-compose up -d
#   working-directory: relis_deployment

# - name: Wait for Application to Start
#   run: sleep 10

# - name: Set relis-app Container permission
#   run: |
#     docker exec relis-app chmod -R 777 /u/relis/public_html/relis_app/

# - name: Run Unit test
#   run: |
#     response=$(php -r " echo file_get_contents('http://localhost:8083/test/unit_test/relis_unit_test/last_result');")
#     echo $response

#     if [ "$response" == "successful" ]; then
#       echo "The unit test passed. Proceeding with the workflow."
#       echo $GITHUB_SHA > successful_commit.txt

#     elif [ "$response" == "failed" ]; then
#       echo "The unit test failed. Reverting to the last successful commit."

#       # Retrieve the commit hash from the file
#       last_successful_commit=$(cat successful_commit.txt)

#       # Reset the branch to the last successful commit
#       git reset --hard $last_successful_commit

#       # Force push to update the branch on the remote repository
#       git push --force

#       exit 1

#     else
#       echo "The unit test has an error"
#       exit 1
#     fi

# - name: Stop all running Docker Containers
#   run: docker stop $(docker ps -q)
