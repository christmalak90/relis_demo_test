############################### NEW ################################
name: Relis unit test

on:
  push:
    branches:
      - main

# permissions: write-all
  # actions: write
  # contents: write
  # checks: write
  # deployments: write
  # discussions: write
  # issues: write
  # packages: write
  # pages: write
  # pull-requests: write
  # repository-projects: write
  # security-events: write
  # statuses: write

jobs:
  relis_unit_testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        # with:
        #   token: ${{ secrets.RELIS_TOKEN }}
      
      # - name: Check if Docker is installed
      #   run: |
      #     if docker --version; then
      #       echo "Docker is installed in your repository."
      #     else
      #       echo "Docker is not installed, please install Docker in your Github Repository."
      #     fi

      # - name: Build Docker Image
      #   run: docker-compose build
      #   working-directory: relis_deployment

      # - name: Run Docker Containers
      #   run: docker-compose up -d
      #   working-directory: relis_deployment

      # - name: Wait for Application to Start
      #   run: sleep 10

      # - name: Set relis-app Container permission
      #   run: |
      #     docker exec relis-app chmod -R 777 /u/relis/public_html/relis_app/

      - name: Run Unit test
        run: |
          # # function revert_changes() {
          # #   last_successful_commit=$(cat last_successful_commit.txt)
          # #   git config user.email $GITHUB_ACTOR
          # #   git config user.name $GITHUB_ACTOR
          # #   git fetch --unshallow
          # #   git revert -X theirs --no-edit $last_successful_commit
          # #   git push
          # # }

          # response=$(php -r " echo file_get_contents('http://localhost:8083/test/unit_test/relis_unit_test/last_result');")
          # echo $response

          # if [ "$response" == "successful" ]; then
          #   echo "The unit test passed. Proceeding with the workflow."
          #         # echo $GITHUB_SHA > last_successful_commit.txt
          #   git tag last_successful_commit $GITHUB_SHA
          #   git config user.email $GITHUB_ACTOR
          #   git config user.name $GITHUB_ACTOR
          #         # git add -f last_successful_commit.txt
            
          #   if git ls-remote --tags origin | grep -q "refs/tags/last_successful_commit"; then
          #     git push --delete origin last_successful_commit
          #   fi

          #   git push origin last_successful_commit
          #         # git commit -m "Update last successful commit $GITHUB_SHA"
          #         # git push

          # elif [ "$response" == "failed" ]; then
            echo "The unit test failed. Reverting changes to the last successful commit."
                  # last_successful_commit=$(cat last_successful_commit.txt)
            # git config user.email $GITHUB_ACTOR
            # git config user.name $GITHUB_ACTOR
                  # git restore .
            git fetch --unshallow
                  # git revert -X theirs --no-edit $last_successful_commit
            git reset --hard last_successful_commit
                  # git push
            git push --force
            exit 1

          # else
          #   echo "The unit test has an error. Reverting changes to the last successful commit."
          #   revert_changes
          #   exit 1
          # fi

      # - name: Stop all running Docker Containers
      #   run: docker stop $(docker ps -q)

  







      ## - name: Run Unit test
      #   env:
      #     RELIS_TOKEN: ${{ secrets.RELIS_TOKEN }}
      #   run: |
      #     echo $GITHUB_SHA > last_successful_commit.txt
      #     git config user.email $GITHUB_ACTOR
      #     git config user.name $GITHUB_ACTOR
      #     git add -f last_successful_commit.txt
      #     git commit -m $GITHUB_SHA
      #     git push

      #     last_successful_commit=$(cat last_successful_commit.txt)
      #     git fetch --unshallow
      #     git revert -X theirs --no-edit $last_successful_commit
      #     git push


      #     git remote set-url --push origin https://$GITHUB_ACTOR:$RELIS_TOKEN@github.com/$GITHUB_REPOSITORY.git         
      #     echo example-line
      #     echo $GITHUB_EVENT_NAME
      #     echo fail
      #     git config user.email $GITHUB_ACTOR
      #     git config user.name $GITHUB_ACTOR
      #     Retrieve the commit hash from the file
      #     last_successful_commit=$(cat successful_commit.txt)
        
      #     Reset the branch to the last successful commit
      #     git clone https://github.com/$GITHUB_ACTOR/relis_demo_test.git
      #     git reset --hard -- b91127550d6c2431f70bdd6d77bee87fb7669cc5

      #     git fetch --unshallow
      #     git log --pretty=format:%H
      #     git revert -X theirs --no-edit 72de205
      #     git commit -m "Revert"

      #     # Force push to update the branch on the remote repository
      #     #git push --force
      #     git push https://${{ secrets.RELIS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git

      #     # # # echo $GITHUB_SHA > successful_commit.txt
      #     # # # git config user.email $GITHUB_ACTOR
      #     # # # git config user.name $GITHUB_ACTOR
      #     # # # git add -f successful_commit.txt
      #     # # # git commit -m $GITHUB_SHA
      #     # # # git push origin main

      #     # # echo ############pushTag
      #     # # git push origin last_successful_commit

      #     # # echo ############fetchTag
      #     # # git fetch --tags

      #     # # echo ############showTag
      #     # # git show last_successful_commit
      #     # # 3200e6ab353824bbc3919236ee432b78598afbb3